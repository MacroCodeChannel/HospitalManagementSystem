@page "/Account/Register"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using HospitalManagementSystem.Data

@inject UserManager<ApplicationUser> UserManager
@inject IUserStore<ApplicationUser> UserStore
@inject SignInManager<ApplicationUser> SignInManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject ILogger<Register> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Register</PageTitle>

<h1>Register</h1>
<div class="col-lg-12">
    <StatusMessage Message="@Message" />
    <EditForm Model="Input" asp-route-returnUrl="@ReturnUrl" method="post" OnValidSubmit="RegisterUser" FormName="register">
        <DataAnnotationsValidator />
        <h2>Create a new account.</h2>
        <hr />

        <div class="row">
            <ValidationSummary class="text-danger" role="alert" />
            <div class="col-md-6 form-floating mb-3">
                <InputText @bind-Value="Input.FirstName" id="Input.FirstName" class="form-control" autocomplete="firstname" aria-required="true" />
                <label for="Input.FirstName">First Name</label>
                <ValidationMessage For="() => Input.FirstName" class="text-danger" />
            </div>
            <div class="col-md-6 form-floating mb-3">
                <InputText @bind-Value="Input.LastName" id="Input.LastName" class="form-control" autocomplete="lastName" aria-required="true" />
                <label for="Input.LastName">Last Name</label>
                <ValidationMessage For="() => Input.LastName" class="text-danger" />
            </div>
            <div class="col-md-6 form-floating mb-3">
                <InputText @bind-Value="Input.NationalIdNumber" id="Input.NationalIdNumber" class="form-control" autocomplete="nationalIdNumber" aria-required="true" />
                <label for="Input.NationalIdNumber">National Id No</label>
                <ValidationMessage For="() => Input.NationalIdNumber" class="text-danger" />
            </div>
            <div class="col-md-6 form-floating mb-3">
                <InputText @bind-Value="Input.Address" id="Input.Address" class="form-control" autocomplete="address" aria-required="true" />
                <label for="Input.Address">Address</label>
                <ValidationMessage For="() => Input.Address" class="text-danger" />
            </div>
            <div class="col-md-6 form-floating mb-6">
                <InputText @bind-Value="Input.MotherName" id="Input.MotherName" class="form-control" autocomplete="motherName" aria-required="true" />
                <label for="Input.MotherName">Mother Name</label>
                <ValidationMessage For="() => Input.MotherName" class="text-danger" />
            </div>
            <div class="col-md-6 form-floating mb-3">
                <InputText @bind-Value="Input.FatherName" id="Input.FatherName" class="form-control" autocomplete="fatherName" aria-required="true" />
                <label for="Input.FatherName">Father Name</label>
                <ValidationMessage For="() => Input.FatherName" class="text-danger" />
            </div>
            <div class="col-md-6 form-floating mb-3">
                <InputText @bind-Value="Input.EmergencyPhoneNumber" id="Input.EmergencyPhoneNumber" class="form-control" autocomplete="emergencyPhoneNumber" aria-required="true" />
                <label for="Input.EmergencyPhoneNumber">Emergency PhoneNumber</label>
                <ValidationMessage For="() => Input.EmergencyPhoneNumber" class="text-danger" />
            </div>
            <div class="col-md-6 form-floating mb-3">
                <InputText @bind-Value="Input.Email" id="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" />
                <label for="Input.Email">Email</label>
                <ValidationMessage For="() => Input.Email" class="text-danger" />
            </div>
            <div class="col-md-6 form-floating mb-3">
                <InputDate @bind-Value="Input.DateOfBirth" id="Input.DateOfBirth" class="form-control" autocomplete="dateofbirth" aria-required="true" placeholder="name@example.com" />
                <label for="Input.DateOfBirth">Date Of Birth</label>
                <ValidationMessage For="() => Input.DateOfBirth" class="text-danger" />
            </div>
            <div class="col-md-6 form-floating mb-3">
                <InputText type="password" @bind-Value="Input.Password" id="Input.Password" class="form-control" autocomplete="new-password" aria-required="true" placeholder="password" />
                <label for="Input.Password">Password</label>
                <ValidationMessage For="() => Input.Password" class="text-danger" />
            </div>
            <div class="col-md-6 form-floating mb-3">
                <InputText type="password" @bind-Value="Input.ConfirmPassword" id="Input.ConfirmPassword" class="form-control" autocomplete="new-password" aria-required="true" placeholder="password" />
                <label for="Input.ConfirmPassword">Confirm Password</label>
                <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" />
            </div>
            <button type="submit" class="w-100 btn btn-lg btn-primary">Register</button>
        </div>
    </EditForm>
</div>

@code {
    private IEnumerable<IdentityError>? identityErrors;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    private string? Message => identityErrors is null ? null : $"Error: {string.Join(", ", identityErrors.Select(error => error.Description))}";

    public async Task RegisterUser(EditContext editContext)
    {
        var user = CreateUser();
        user.Address = Input.Address;
        user.FirstName = Input.FirstName;
        user.LastName = Input.LastName;
        user.NationalIdNumber = Input.NationalIdNumber;
        user.MotherName = Input.MotherName;
        user.FatherName = Input.FatherName;
        user.EmergencyPhoneNumber = Input.EmergencyPhoneNumber;
        user.DateOfBirth = Input.DateOfBirth;


        await UserStore.SetUserNameAsync(user, Input.Email, CancellationToken.None);
        var emailStore = GetEmailStore();
        await emailStore.SetEmailAsync(user, Input.Email, CancellationToken.None);
        var result = await UserManager.CreateAsync(user, Input.Password);

        if (!result.Succeeded)
        {
            identityErrors = result.Errors;
            return;
        }

        Logger.LogInformation("User created a new account with password.");

        var userId = await UserManager.GetUserIdAsync(user);
        var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
            new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code, ["returnUrl"] = ReturnUrl });

        await EmailSender.SendConfirmationLinkAsync(user, Input.Email, HtmlEncoder.Default.Encode(callbackUrl));

        if (UserManager.Options.SignIn.RequireConfirmedAccount)
        {
            RedirectManager.RedirectTo(
                "Account/RegisterConfirmation",
                new() { ["email"] = Input.Email, ["returnUrl"] = ReturnUrl });
        }

        await SignInManager.SignInAsync(user, isPersistent: false);
        RedirectManager.RedirectTo(ReturnUrl);
    }

    private ApplicationUser CreateUser()
    {
        try
        {
            return Activator.CreateInstance<ApplicationUser>();
        }
        catch
        {
            throw new InvalidOperationException($"Can't create an instance of '{nameof(ApplicationUser)}'. " +
                $"Ensure that '{nameof(ApplicationUser)}' is not an abstract class and has a parameterless constructor.");
        }
    }

    private IUserEmailStore<ApplicationUser> GetEmailStore()
    {
        if (!UserManager.SupportsUserEmail)
        {
            throw new NotSupportedException("The default UI requires a user store with email support.");
        }
        return (IUserEmailStore<ApplicationUser>)UserStore;
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        [Display(Name = "Email")]
        public string Email { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";


        [Display(Name = "First Name")]
        public string FirstName { get; set; }

        [Display(Name = "LastName")]
        public string LastName { get; set; }

        [Display(Name = "Address")]
        public string Address { get; set; }

        [Display(Name = "Emergency Phone Number")]
        public string EmergencyPhoneNumber { get; set; }

        [Display(Name = "Date Of Birth")]
        public DateTime DateOfBirth { get; set; }

        [Display(Name = "Mother Name")]
        public string MotherName { get; set; }

        [Display(Name = "Father Name")]
        public string FatherName { get; set; }

        [Display(Name = "National Id No")]
        public string NationalIdNumber { get; set; }

        [Display(Name = "Sex")]
        public int? GenderId { get; set; }

        [Display(Name = "Blood Group")]
        public int? BloodGroupId { get; set; }

        [Display(Name = "Marital Status")]
        public int? MaritalStatusId { get; set; }
    }
}
